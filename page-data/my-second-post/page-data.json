{"componentChunkName":"component---src-templates-blog-post-js","path":"/my-second-post/","result":{"data":{"site":{"siteMetadata":{"title":"ðŸ¥·'s blog"}},"markdownRemark":{"id":"8a3554e7-ffd2-5c2a-92e7-e84caf90d33e","excerpt":"Constructor Pattern Module Pattern  is also a new ES6 feature that seems to be a good option for creating private memebers. It accepts any value as a key andâ€¦","html":"<h2>Constructor Pattern</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token comment\">/*\n * Constructor Pattern\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>miles <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span>miles<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Prototype method</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has driven </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>miles<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> miles</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Usage:</span>\n<span class=\"token keyword\">var</span> civic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  model<span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span>\n  year<span class=\"token operator\">:</span> <span class=\"token number\">2001</span><span class=\"token punctuation\">,</span>\n  miles<span class=\"token operator\">:</span> <span class=\"token number\">50000</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES5 Example of constructor function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Module Pattern</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* lib/module.js */</span>\n<span class=\"token keyword\">const</span> shoppingList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * Module Pattern\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractDataType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// woo! our Class is instantiated lets add some private properties.</span>\n    shoppingList<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"coffee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pizza\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Lets create a public prototype method to access our private `shoppingList`</span>\n  <span class=\"token function\">getShoppingList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> shoppingList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shoppingList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Now we export our `Class` which will become an importable module.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AbstractDataType</code></pre></div>\n<p><code class=\"language-text\">WeakMap</code> is also a new ES6 feature that seems to be a good option for creating private memebers. It accepts any value as a key and doesnâ€™t prevent the key object from getting garbage collected when the <code class=\"language-text\">WeakMap</code> object still exists. It remove any entry containing the object once itâ€™s garbage collected.</p>\n<h2>Observer Pattern</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/*\n * Observer Pattern\n */</span>\n<span class=\"token keyword\">var</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// async callback</span>\n  changes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span>oldValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Another popular pattern that is being simplified in ES6/ES7 is the <code class=\"language-text\">Observer Pattern</code>. If youâ€™re not familiar the <code class=\"language-text\">Observer Pattern</code> is a design pattern in which an object (known as the subject) maintains a list of objects depending on what it observes (observers), automatically notifying them of any changes to state. In ES5 this was a little cumbersome to setup but not difficult. You created a ObserverList constructor function which creates an empty list of observers. After that you create an interface of public prototype methods for tasks like adding, deleting, etc. Now itâ€™s much more simple we have a handy dandy Object.observe method we can use to do the same job with a lot less code.</p>","frontmatter":{"title":"JS design pattern","date":"July 06, 2020","description":"ES5 design pattern."}},"previous":{"fields":{"slug":"/module-federation/"},"frontmatter":{"title":"Module in Nodejs"}},"next":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"JavaScript Architecture Application"}}},"pageContext":{"id":"8a3554e7-ffd2-5c2a-92e7-e84caf90d33e","previousPostId":"2fe56c38-798c-56e9-8ca3-ba354af37a28","nextPostId":"015713ba-9a83-5156-ba51-a6487d4fa8a0"}},"staticQueryHashes":["2841359383","3257411868"]}